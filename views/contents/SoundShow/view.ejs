<!DOCTYPE html>
<html lang="ko">
    
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0">
        <link rel="shortcut icon" href="/icons/logo3.ico">
        
		<link href="/css/bootstrap.css" rel="stylesheet" type="text/css"/>
		<link rel="stylesheet" href="/css/sunny/jquery-ui-1.10.2.custom.min.css" type="text/css" media="screen" title="no title" charset="utf-8">
		<link href="/color-picker/jquery.colorpicker.css" rel="stylesheet" type="text/css"/>

		
		<!--script src="/js/require.js"/-->
        <script src="/js/jquery-1.7.1.js"></script>
        <script src="/js/jquery.transit.min.js"></script>
        <!-- <script src="/js/jquery-ui.js"></script>-->	
		<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.js"></script>
				
				
		
        <script src="/js/google_analytics.js"></script>
        <script src="/js/bootstrap.min.js"></script>
        <script src="/js/underscore.js"></script>
        <script src="/js/SoundShow/soundshow.js"></script>
		<script src="/socket.io/socket.io.js"></script>
		<script src="/color-picker/jquery.colorpicker.js"></script>
		<script src="/color-picker/i18n/jquery.ui.colorpicker-nl.js"></script>
		<script src="/color-picker/swatches/jquery.ui.colorpicker-pantone.js"></script>
		<script src="/color-picker/parts/jquery.ui.colorpicker-rgbslider.js"></script>
	    <script src="/js/parse-1.2.7.min.js"></script>

	    <script type="text/template" id="pattern-template">
			<div class="pattern">
				<span><?=e.type?></span>
				<!--span><?=e.objectId?></span>
				<span><?=e.createdAt?></span-->
				<?console.log(e.data);?>
				<?=_.template($('#Pattern-Color-template').html())({e: JSON.parse(e.data)})?>
				<button class="delete-btn" >delete</button>
			</div>
		</script>
		
		
	    <script type="text/template" id="Pattern-FadeTo-template">
			<div class="FadeTo" style="background-color:<?=e.color?>">
			</div>
		</script>
	    <script type="text/template" id="Pattern-Color-template">
			<div class="Color" style="background-color:<?=e.color?>">
			</div>
		</script>
		
		
	    <script type="text/template" id="login-template">
	   		<header id="header"></header>
	      	<div class="login">
		        <form class="login-form">
		        	<h2>Log In</h2>
		         	<div class="error" style="display:none"></div>
		         	<input type="text" id="login-username" placeholder="Username" />			  <input type="password" id="login-password" placeholder="Password" />
				    <button>Log In</button>
		        </form>
				<form class="signup-form">
		        	<h2>Sign Up</h2>
		        	<div class="error" style="display:none"></div>
		        	<input type="text" id="signup-username" placeholder="Username" />
		        	<input type="password" id="signup-password" placeholder="Create a Password" />
		        	<button>Sign Up</button>
		      	</form>
			</div>
	    </script>
		
	    <script type="text/template" id="track-template">
			<div class="pattern">
				<h4><?=v.object_id?></h4>
				<?_.each(e.colors,function(v){ ?>
					<?=v.present()?>
				<?});?>
			</div>
		</script>
	    <script type="text/template" id="color-template">
			<div class="color" style="background-color:<?=e.color?>;">
				<div class="overlay">
				</div>
			</div>
		</script>
		<script>
			$(function() {
				Parse.$ = jQuery;
				// Initialize Parse with your Parse application javascript keys
		  	 	Parse.initialize("PJbZN8uNbyIehnkz7VyY53RJG6rEVHdzKcCoUZYR", "9luQVvgoxvJ8XI7mJPP3jaqCrx0Oj8xgpTdigwck");
				var User = Parse.Object.extend("User", {
				});
				// Construct a query to get the current user's todo items
				var query = new Parse.Query(User);
				
				
				var Pattern = Parse.Object.extend("Pattern");
				// A Collection containing all instances of Pattern.
				var PatternList = Parse.Collection.extend({
					model: Pattern
				});
				
			    var PatternView = Parse.View.extend({
					//... is a list tag.
			    	tagName:  "div",
					// Cache the template function for a single item.
			     	template: _.template($('#pattern-template').html()),
					// The DOM events specific to an item.
			     	events: {
			        	"click .delete-btn" : "onDelete"
			      	},
					// The TodoView listens for changes to its model, re-rendering. Since there's
			      	// a one-to-one correspondence between a Todo and a TodoView in this
			      	// app, we set a direct reference on the model for convenience.
			      	initialize: function() {
			        	_.bindAll(this, 'render', 'close', 'remove');
			        	this.model.bind('change',  this.render);
			        	this.model.bind('destroy', this.remove);
			      	},
					// Re-render the contents of the todo item.
			      	render: function() {
			        	$(this.el).html( this.template({ e:this.model.toJSON() }) );
			        	return this;
			      	},
				    // Close the `"editing"` mode, saving changes to the todo.
				    close: function() {
				   	 	this.model.save();
				  	},
					// Remove the item, destroy the model.
			      	onDelete: function() {
			      		this.model.destroy();
			      	}
			    });
				
				
				
			    var PatternListView = Parse.View.extend({
			    	el: $("#pattern_list"),
					initialize: function() {
						var self = this;
						
				        _.bindAll(this, 'addOne', 'addAll', 'render');
						// Create our collection of Todos
				        this.patternList = new PatternList;

				        // Setup the query for the collection to look for todos from the current user
				        this.patternList.query = new Parse.Query(Pattern);
				        this.patternList.bind('add',   this.addOne);
				        this.patternList.bind('reset', this.addAll);
				        this.patternList.bind('all',   this.render);
						this.patternList.fetch();
			        },
				    addOne: function(pattern) {
						var view = new PatternView({model: pattern});
				    	$("#pattern_list").append(view.render().el);
				    },
					addAll: function(collection, filter) {
				    	this.patternList.each(this.addOne);
				    },
					render : function() {
			        },
				});
				
				


		        Parse.User.logIn("admin", "admin", {
		        	success: function(user) {
						console.log("success",user);
					},
					error: function(user, error) {
		            	console.log("error",user,error);
					}
		        });
				
				new PatternListView();
				
//				Parse.history.start();
			});
		</script>
		<script>
		    _.templateSettings = {
				escape		: /<\?-([\s\S]+?)\?>/g,
				evaluate	: /<\?([\s\S]+?)\?>/g,
				interpolate : /<\?=([\s\S]+?)\?>/g
	    	};
	    	
			function Pattern(){
				this.colors = [];
				this.t = "single_color";
				this.$div = null;
				this.interval = 10;
			}
			Pattern.prototype = {
				template : _.template($('#pattern-template').html()) ,
				present : function(){
					var self = this;	
					this.$div = $(this.template({e:this}));
					this.$div.find("select").change(function(){
						self.t = $(this).val();
						console.log(self);
					});
					this.$div.find(".play_button").click(function(){
						self.play();
					});
					this.$div.find(".add-color-btn").click(function(){
						$(this).colorpicker({
							showCloseButton  : true ,
							showCancelButton : true ,
							close:function(event, color) {
								self.addColor(new Color("#" + color.formatted));
								//console.log(color);
								
							} 
						});						
					});
					this.$div[0].model = this;
					return this.$div;
				},
				play : function(){
					var colors = [];
					_.each(this.colors,function(c){
						colors.push(c.color);
					});
					var data = {
						t : this.t,
						colors : colors,
						interval : this.interval
					};
					console.log(data);
					socket.emit("screen_color",data);
				},
				addColor : function(color){
					var self = this;
					
					this.colors.push(color);
					var $color = $(color.present());
					$color[0].model = color;

					color.$div = $color;
					// $color.click(function(){
					// 	$(this).colorpicker();
					// })
					console.log($color.find(".overlay"));
					$color.find(".overlay").click(function(){
						self.removeColor(color);
					});
					this.$div.append($color);
				},
				removeColor : function(color){
					if(color.$div) 
						color.$div.remove();
					
					this.colors = _.without(this.colors,color);
				}
			};
			
			
			var socket = null;
            function connectWS() {
                console.log('Connecting to local server...');
                if (socket == null) {
                    socket = io.connect("/SoundShow");
					socket.on('message', function(data) {
                    });
                    socket.on('disconnect', function() {
					});
                }
                socket.socket.connect();
            }
			
			function get_random_color() {
			    var letters = '0123456789ABCDEF'.split('');
			    var color = '#';
			    for (var i = 0; i < 6; i++ ) {
			        color += letters[Math.round(Math.random() * 15)];
			    }
			    return color;
			}
						
			$(document).ready(function() {
                connectWS();
            	$("body").keydown(function(e){
					console.log(e.keyCode);
					switch(e.keyCode) {
						case 39 : 
							$("#blink_input").val(Number($("#blink_input").val()) + 2); 
							onBlinkIntervalChange($("#blink_input"));
							break;
						case 37 :
							$("#blink_input").val(Number($("#blink_input").val()) - 2); 
							onBlinkIntervalChange($("#blink_input"));
							break;
 				   		case 81 : $(".pattern")[0].model.play(); break; 
						case 87 : $(".pattern")[1].model.play(); break;
						case 69 : $(".pattern")[2].model.play(); break;
						case 82 : $(".pattern")[3].model.play(); break;
						case 84 : $(".pattern")[4].model.play(); break;
 				   	}
					console.log($("#blink_input").val());
            	});
			});

			function stopAll(){
				socket.emit("screen_color",{
					t : "fade_stop"
				});
			}
			function addNewPattern(){
				var pattern = new Pattern();
				pattern.t = "fadeTo";
				$(".pallete").append(pattern.present());
			}
        </script>
        <style>
		.pallete { 
			width:100%;
			min-height:500px;
			border:1px solid #1555ff;
		}
		.pallete .pattern{
			margin:5px;
			min-width:400px;
			height:40px;
			width:auto;
			display:block;
			border:1px solid black;
		}
		.FadeTo {
			width:100%;
			height:100%;
		}
		.Color {
			width: 50px;
			height: 50px;
		}
		.pallete .pattern select{
			float:left;
		}
		.pallete .pattern .add-color-btn {
			float:right;
			height:100%;
			position:relative;
		}
		.pallete .pattern .color {
			float:left;
			display:inline-block;
			width:40px;
			height:100%;
			position:relative;
		}
		.pallete .pattern .color .overlay {
			position:absolute;
			width:15px;
			height:15px;
			background-color:red;
			display:none;
		}
		.pallete .pattern .color:hover .overlay {
			position:absolute;
			width:15px;
			height:15px;
			background-color:rgba(0,0,0,100);
			display:block;
		}
        </style>
		
        <title>Comunicar</title>
    </head>
    <body>
		<header>
			<h1>SoundShow Control Panel</h1>
		</header>
		<div class="container-fluid">
	  		<div class="row-fluid">
	    		<div class="span2">
					<div id="pattern_list">
					</div>
					<button class="btn btn-primary btn-large" 
							onclick="addNewPattern();">add New Pattern</button>
			 	</div>
	    		<div class="span10">
					<div class="track_list">
					</div>
					<button class = "btn btn-danger btn-large" onclick="stopAll();">stop all</button>
	    		</div>
	  	  </div>
		</div>
		<!-- <div>
		<button onclick="startSendingBlink();">send blink</button>
		<button onclick="sendColor();">send color</button> -->
	</body>
</html>